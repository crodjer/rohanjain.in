<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>The Perpetual Amateur</title>
    <link href="http://www.rohanjain.in/feed.xml" rel="self" />
    <link href="http://www.rohanjain.in" />
    <id>http://www.rohanjain.in/feed.xml</id>
    <author>
        <name>Rohan Jain</name>
        <email>crodjer@gmail.com</email>
    </author>
    <updated>2016-05-04T00:00:00Z</updated>
    <entry>
    <title>Gazing in the night sky</title>
    <link href="http://www.rohanjain.in/sky/" />
    <id>http://www.rohanjain.in/sky/</id>
    <published>2016-05-04T00:00:00Z</published>
    <updated>2016-05-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>About 6 months ago, I picked up a new hobby: Stargazing. Starting off with just naked eyes, I quickly realized that there is actually quite a lot to see without any optical equipment. <a href="https://play.google.com/store/apps/details?id=com.google.android.stardroid&amp;hl=en">Sky Map</a> and <a href="http://stellarium.org/">Stellarium</a> are incredibly useful applications for a dilettante like me.</p>
<h2 id="dark-adjustment">Dark adjustment</h2>
<p>Before any stargazing session, dark adjustment is essential. I turn off all kinds of lights in house and listen to podcasts for a while (at least 30 minutes). For me, the outside is usually brighter than the pitch dark I maintain in-house. Avoiding the bright lights from neighbours can be a challenge. Moon’s an issue too.</p>
<h2 id="constellations">Constellations</h2>
<p>At the time I started, the most identifiable constellation was <a href="https://en.wikipedia.org/wiki/Orion_(constellation)">Orion</a>. <a href="https://en.wikipedia.org/wiki/Betelgeuse">Betelgeuse</a>, reddish orange in color, very quickly became my favorite star (overall). It gets the designation α Orionis even though Rigel is the brightest star in Orion (β Orionis). Betelgeuse’s <a href="https://en.wikipedia.org/wiki/Apparent_magnitude">apparent magnitude</a> varies between 0-1.3, making it at times the brightest star in Orion.</p>
<p>Betelgeuse is huge with 630 times the radius of the sun. It was the first star (other than the Sun) to be imaged beyond a point source.</p>
<blockquote>
<p>The <a href="https://en.wikipedia.org/wiki/Apparent_magnitude">apparent magnitude</a> (m) of a celestial object is a number that is a measure of its brightness as seen by an observer on Earth. The smaller the number, the brighter a star appears.<br />
- Wikipedia</p>
</blockquote>
<p><a href="https://en.wikipedia.org/wiki/Taurus_(constellation)">Taurus</a> is another constellation that I observed in my initial stargazing period. It extends over a large area, so not as identifiable. But it is a host for a unique star cluster: <a href="https://en.wikipedia.org/wiki/Pleiades">Pleiades</a>. The 5-6 close by bright stars is a singular sight with naked eyes.</p>
<p><a href="https://en.wikipedia.org/wiki/Canis_Major">Canis Major</a> also has a significance for me as the host for <a href="https://en.wikipedia.org/wiki/Sirius">Sirius</a> (the brightest star). Its relatively close, being only about 8.6 light years away.</p>
<p>There were some other constellations as well, but I haven’t paid them too much attention. Listing some off the top of my head: Gemini, Puppis, Hydra and Virgo. But I couldn’t identify them without Orion / Canis Major as anchors.</p>
<h2 id="moon">Moon</h2>
<p>Moon’s the most noticeable and obvious site in the sky. At times, based on the shape of the moon’s bright portion, I’d think about how the Sun, the Moon and the Earth are located. The <a href="https://en.wikipedia.org/wiki/22°_halo">22° halo</a> around the moon is also nice to look at. To be honest though, I am always more interested in the Moon’s absence, since it impacts the visibility of stars significantly. It also damages my eyes’ dark adjustment.</p>
<h2 id="planets">Planets</h2>
<p>The first 6 planets are readily visible to the naked eye. Although, Earth’s little too close to have an astronomical perspective. Because planets are at a distance that they look like extend objects, they don’t twinkle. This makes it easy to differentiate them from stars.</p>
<p>March this year, Jupiter was at the opposition (Earth positioned in between the Sun and Jupiter) and had its closest approach the the Earth. So, it was at its brightest.</p>
<p>Venus is always very bright (3rd brightest after the Sun and the Moon), but is visible near the Sunrise and the Sunset (hence called the morning/evening star).</p>
<p>Mars and Saturn as of now are located nearby. Mars is bright reddish in color and Saturn is yellowish in color.</p>
<p>22nd January 2016 was a interesting day for planet watching. The 5 planets were <a href="http://news.nationalgeographic.com/2015/12/160120-planet-parade-stargazing-astronomy/">all aligned</a> for the first time in over a decade.</p>
<p>The path that the Sun and the planets take also point toward the flatness of the solar system. Feels nice to get some empirical evidence of this, against just having this told.</p>
<h2 id="artificial-objects">Artificial objects</h2>
<p>A few artificial objects orbiting the Earth can be seen as well. For them, the sunset happens later (or sunrise earlier) than us, providing us with the dark background and enough contrast for the sunlight they reflect. The International Space Station (ISS), because of its size is brighter than even Venus. <a href="https://spotthestation.nasa.gov/">This NASA’s site</a> can be used to plan an ISS sighting.</p>
<p><a href="https://en.wikipedia.org/wiki/Satellite_flare#Iridium_flares">Iridium</a> satellites’ flares are also noticeable at times. There are ways to plan their sightings, but I haven’t done that yet.</p>
<h2 id="limiting-magnitude-lm">Limiting Magnitude (LM)</h2>
<p>Quoting Wikipedia:</p>
<blockquote>
<p>In astronomy, <a href="https://en.wikipedia.org/wiki/Limiting_magnitude">limiting magnitude</a> is the faintest apparent magnitude of a celestial body that is detectable or detected by a given instrument.</p>
</blockquote>
<p>When I stargazed with just the naked eye, I liked to calculate the limiting magnitude. This would give me an idea of the light pollution and what I should expect. I notice light pollution in Pune is (unsurprisingly) more than that in Jaipur. From <a href="http://www.imo.net/visual/major/observation/lm">these charts</a>, I calculated the LM to be about 4.5. I came to doubt that when I eventually started using <a href="http://stellarium.org/">Stellarium</a>. The naked eye LM at my place is roughly 3.5 - 3.8.</p>
<p>I should give using the charts another try. At the time, I had used the Tau (using stars in/near Taurus) chart which has a magnitude gap of 1.62 between 3 and 4 visible stars.</p>
<h2 id="telescope">Telescope</h2>
<p>After a month of naked eye stargazing, I bought a telescope (similar to <a href="http://www.amazon.com/gp/product/B0000Y8C2Y/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B0000Y8C2Y&amp;linkCode=as2&amp;tag=crodjer-20&amp;linkId=H3RLG5OMNQX6ZMOH">this one</a> but with better eyepieces) from a local shop. I’ll write about my observations with that over the next few days.</p>
]]></summary>
</entry>
<entry>
    <title>You have infinite email addresses</title>
    <link href="http://www.rohanjain.in/infi-mail/" />
    <id>http://www.rohanjain.in/infi-mail/</id>
    <published>2016-04-02T00:00:00Z</published>
    <updated>2016-04-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<blockquote>
<p><strong>tl;dr</strong><br />
You can add arbitrary tags to your email address. Any email sent to <code>your-email+tag@your-provider.ext</code> will land in the inbox for <code>your-email@your-provider.ext</code>.</p>
</blockquote>
<p>Emails are important. They are your identity on the web. Just like on phone, you’d want to control who can contact you via email. This warrants caution in signing up at places on the internet. It can be unsafe to register with the personal email address on new services for multiple reasons:</p>
<ul>
<li>Bulk data breaches <a href="http://www.huffingtonpost.com/entry/biggest-worst-data-breaches-hacks_us_55d4b5a5e4b07addcb44fd9e">are fairly common</a>. You don’t want your email address out there for bots around the world to feed on.</li>
<li>The service you are signing up for may itself be malicious. Or worse, it may be Facebook!</li>
<li>Same email address on every service can make it simpler for bots to break into your accounts once they succeed in attacking one.</li>
<li>There <a href="https://www.fullcontact.com/gmail/">are actual services</a> dedicated for creating single points of catastrophic failures utilizing email addresses.</li>
</ul>
<p>These sound upsetting, but are indeed manageable to an extent. One trick that I use is <em>tagging the email address</em>. It is a fairly common practice among programmers. Most popular email services support this.</p>
<p>What do I mean by tagging? Lets take Jon’s email: <code>jon.snow@email.wf</code>. His sister, Arya, will know this address as is. But for the untrustworthy Lannisters, he tags the email: <code>jon.snow+lannister@email.wf</code>. When someone writes to this address: he will receive the mails knowing that Lannisters were involved.</p>
<blockquote>
<p><code>email.wf</code> here is a fictional service, analogous to <code>gmail.com</code>. I didn’t want to accidentally use an actual email address.</p>
</blockquote>
<p>One may use a similar technique while signing up for services on the internet. Say Jon wants to register on <code>nightswatch.got</code>.</p>
<ul>
<li>In <em>Night’s Watch</em> registration form, he’d use <code>jon.snow+nighstwatch@email.wf</code> as the email. The tag <code>+nighstwatch</code> here is arbitrarily chosen.</li>
<li>Jon will get the confirmation mail in the original account. Being prudent, he’ll verify that the mail it does have the correct tag in the <em>to address</em>.</li>
<li>Also, <code>email.wf</code> lets Jon send emails with the tagged address. This is useful for talking to the customer care. GMail users can go to:<br />
<code>Settings -&gt; Accounts and Import -&gt; Add another email address you own</code>.<br />
and filling up the form with the tagged address.</li>
</ul>
<p>This means Jon can have practically infinite email addresses. Why is this helpful?</p>
<ul>
<li>Jon can collect all the mails from <em>Night’s Watch</em> at one place, specially when their mails aren’t consistent enough to write filters.</li>
<li>If the credentials for the <em>Night’s Watch</em> account were to be leaked, say through Phishing, other more important services like the email account itself would not be as vulnerable.</li>
<li>One cannot track Jon’s movements across various accounts/profiles through his email.</li>
<li>Sites which don’t allow tags in the email address can be a red flags for Jon. He can assume that they’d have terrible developers/management and look for alternates.</li>
</ul>
<p>Making this into a habit will require a bit of discipline. But eventually, it gets instinctive.</p>
<p>On a related note, <a href="http://www.amazon.com/gp/product/1118958470/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1118958470&amp;linkCode=as2&amp;tag=crodjer-20&amp;linkId=244BG6VSA5AT2K5S">this</a> is an interesting book, that talks about Phishing through email in the real world.</p>
]]></summary>
</entry>
<entry>
    <title>Categorizing archives by year with Hakyll</title>
    <link href="http://www.rohanjain.in/hakyll-years/" />
    <id>http://www.rohanjain.in/hakyll-years/</id>
    <published>2015-08-31T00:00:00Z</published>
    <updated>2015-08-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Recently, I decided to categorize my posts under directories named by the year they were created in. For example, this post is placed at: <code>posts/2015/hakyll-years.mkd</code>. I decided to utilize this structure to also group how archives are listed. Inspired from <a href="http://jaspervdj.be/hakyll/reference/src/Hakyll-Web-Tags.html">Hakyll’s tag functionality</a> I wrote my own group by years functionality. This post tries to explain that. Also, I don’t see why a similar logic cannot be used to do simple pagination.</p>
<p>First, like tags, we need to build the list of years. <code>buildYears</code> (like <code>buildTags</code>) will do that:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">buildYears ::</span> <span class="dt">MonadMetadata</span> m <span class="ot">=&gt;</span> <span class="dt">Pattern</span> <span class="ot">-&gt;</span> m [(<span class="dt">Year</span>, <span class="dt">Int</span>)]
buildYears pattern <span class="fu">=</span> <span class="kw">do</span>
    ids <span class="ot">&lt;-</span> getMatches pattern
    return <span class="fu">.</span> frequency <span class="fu">.</span> (map getYear) <span class="fu">$</span> ids
  <span class="kw">where</span>
    frequency xs <span class="fu">=</span>  M.toList (M.fromListWith (<span class="fu">+</span>) [(x, <span class="dv">1</span>) <span class="fu">|</span> x <span class="ot">&lt;-</span> xs])

<span class="ot">getYear ::</span> <span class="dt">Identifier</span> <span class="ot">-&gt;</span> <span class="dt">Year</span>
getYear <span class="fu">=</span> takeBaseName <span class="fu">.</span> takeDirectory <span class="fu">.</span> toFilePath</code></pre></div>
<p>This now can be used in the site <code>Rules</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  years <span class="ot">&lt;-</span> buildYears <span class="st">&quot;posts/*/*&quot;</span></code></pre></div>
<p>With this, you have a list of years available for other rules to use. Now, we build an index of posts by years (similar to <code>tagsRules</code>):</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  forM_ years <span class="fu">$</span> \(year, _)<span class="ot">-&gt;</span>
      create [yearId year] <span class="fu">$</span> <span class="kw">do</span>
         route   idRoute
         compile <span class="fu">$</span> <span class="kw">do</span>
           <span class="co">-- Only the posts published in &#39;year&#39;</span>
           posts <span class="ot">&lt;-</span> recentFirst <span class="fu">=&lt;&lt;</span> loadAll (fromGlob <span class="fu">$</span> <span class="st">&quot;posts/&quot;</span> <span class="fu">++</span> year <span class="fu">++</span><span class="st">&quot;/*&quot;</span>)
           <span class="kw">let</span> postsCtx <span class="fu">=</span> mconcat
                          [ listField <span class="st">&quot;posts&quot;</span> postCtx (return posts)
                          , constField <span class="st">&quot;title&quot;</span> (<span class="st">&quot;Posts published in &quot;</span> <span class="fu">++</span> year)
                          , defaultContext
                          ]
           makeItem <span class="st">&quot;&quot;</span>
            <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/posts.html&quot;</span> postsCtx
            <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> postsCtx
            <span class="fu">&gt;&gt;=</span> relativizeUrls
            <span class="fu">&gt;&gt;=</span> cleanIndexUrls

<span class="ot">yearPath ::</span> <span class="dt">Year</span> <span class="ot">-&gt;</span> FilePath
yearPath year <span class="fu">=</span> <span class="st">&quot;archive/&quot;</span> <span class="fu">++</span> year <span class="fu">++</span> <span class="st">&quot;/&quot;</span>

<span class="ot">yearId ::</span> <span class="dt">Year</span> <span class="ot">-&gt;</span> <span class="dt">Identifier</span>
yearId <span class="fu">=</span> fromFilePath <span class="fu">.</span> yearPath</code></pre></div>
<p>We now have year wise archives which can be accessed through paths like: <code>/archive/2015/</code>. Similar to tags, we need to support browsing through posts by years. <code>renderYears</code> does that:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Extra blaze related imports</span>
<span class="kw">import           </span><span class="dt">Text.Blaze.Html</span>                 (toHtml, toValue, (!))
<span class="kw">import           </span><span class="dt">Text.Blaze.Html.Renderer.String</span> (renderHtml)
<span class="kw">import qualified</span> <span class="dt">Text.Blaze.Html5</span>                <span class="kw">as</span> <span class="dt">H</span>
<span class="kw">import qualified</span> <span class="dt">Text.Blaze.Html5.Attributes</span>     <span class="kw">as</span> <span class="dt">A</span>


<span class="ot">renderYears ::</span> [(<span class="dt">Year</span>, <span class="dt">Int</span>)] <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">String</span>
renderYears years <span class="fu">=</span> <span class="kw">do</span>
  years&#39; <span class="ot">&lt;-</span> forM (reverse <span class="fu">.</span> sort <span class="fu">$</span> years) <span class="fu">$</span> \(year, count) <span class="ot">-&gt;</span> <span class="kw">do</span>
      route&#39; <span class="ot">&lt;-</span> getRoute <span class="fu">$</span> yearId year
      return (year, route&#39;, count)
  return <span class="fu">.</span> intercalate <span class="st">&quot;, &quot;</span> <span class="fu">$</span> map makeLink years&#39;

  <span class="kw">where</span>
    makeLink (year, route&#39;, count) <span class="fu">=</span>
      (renderHtml (H.a <span class="fu">!</span> A.href (yearUrl year) <span class="fu">$</span> toHtml year)) <span class="fu">++</span>
      <span class="st">&quot; (&quot;</span> <span class="fu">++</span> show count <span class="fu">++</span> <span class="st">&quot;)&quot;</span>
    yearUrl <span class="fu">=</span> toValue <span class="fu">.</span> toUrl <span class="fu">.</span> yearPath</code></pre></div>
<p>Add this to a pages context like this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  create [<span class="st">&quot;index.html&quot;</span>] <span class="fu">$</span> <span class="kw">do</span>
         route   idRoute
         compile <span class="fu">$</span> <span class="kw">do</span>
           <span class="co">-- rest of the compiler context</span>
           <span class="kw">let</span> indexCtx <span class="fu">=</span> mconcat
                          [ <span class="co">-- some context</span>
                          , field <span class="st">&quot;years&quot;</span> (\_ <span class="ot">-&gt;</span> renderYears years)
                          , defaultContext
                          ]
           <span class="co">-- rest of the compiler</span></code></pre></div>
<p><code>$years$</code> will be available in the template which will link to year wise archives with their corresponding per year count.</p>
<blockquote>
<p>See this functionality being used by <a href="https://github.com/crodjer/rohanjain.in/blob/master/site.hs">this blog</a>.</p>
</blockquote>
<p>Also, you’d notice that years here could easily have been various categories you may want to have in your blog.</p>
]]></summary>
</entry>
<entry>
    <title>Sitemap with Hakyll</title>
    <link href="http://www.rohanjain.in/hakyll-sitemap/" />
    <id>http://www.rohanjain.in/hakyll-sitemap/</id>
    <published>2015-08-30T00:00:00Z</published>
    <updated>2015-08-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Its fairly trivial to configure <a href="http://jaspervdj.be/hakyll/">Hakyll</a> to generate sitemaps. Sitemaps helps search engines websites. Similar to any typical html page, create a template - <code>templates/sitemap.xml</code>:</p>
<div class="sourceCode"><pre class="sourceCode xml"><code class="sourceCode xml"><span class="kw">&lt;?xml</span> version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;<span class="kw">?&gt;</span>
<span class="kw">&lt;urlset</span><span class="ot"> xmlns=</span><span class="st">&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;</span><span class="kw">&gt;</span>
$for(entries)$
    <span class="kw">&lt;url&gt;</span>
        <span class="kw">&lt;loc&gt;</span>$host$$url$<span class="kw">&lt;/loc&gt;</span>
        <span class="kw">&lt;changefreq&gt;</span>weekly<span class="kw">&lt;/changefreq&gt;</span>
        $if(lastmod)$<span class="kw">&lt;lastmod&gt;</span>$lastmod$<span class="kw">&lt;/lastmod&gt;</span>$endif$
        <span class="kw">&lt;priority&gt;</span>0.8<span class="kw">&lt;/priority&gt;</span>
    <span class="kw">&lt;/url&gt;</span>
$endfor$
<span class="kw">&lt;/urlset&gt;</span></code></pre></div>
<p>Then, using the templates, create a rule which uses all the pages from the site as entries. Here is what I do:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  create [<span class="st">&quot;sitemap.xml&quot;</span>] <span class="fu">$</span> <span class="kw">do</span>
         route   idRoute
         compile <span class="fu">$</span> <span class="kw">do</span>
           posts <span class="ot">&lt;-</span> recentFirst <span class="fu">=&lt;&lt;</span> loadAll <span class="st">&quot;posts/*/*&quot;</span>
           pages <span class="ot">&lt;-</span> loadAll <span class="st">&quot;pages/*&quot;</span>
           <span class="kw">let</span> allPosts <span class="fu">=</span> (return (pages <span class="fu">++</span> posts))
           <span class="kw">let</span> sitemapCtx <span class="fu">=</span> mconcat
                            [ listField <span class="st">&quot;entries&quot;</span> pageCtx allPosts
                            , constField <span class="st">&quot;host&quot;</span> host
                            , defaultContext
                            ]
           makeItem <span class="st">&quot;&quot;</span>
            <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/sitemap.xml&quot;</span> sitemapCtx
            <span class="fu">&gt;&gt;=</span> cleanIndexHtmls</code></pre></div>
<p>This generates <a href="/sitemap.xml" class="uri">/sitemap.xml</a> which can be submitted to search engines for indexing.</p>
]]></summary>
</entry>
<entry>
    <title>Clean URLs with Hakyll</title>
    <link href="http://www.rohanjain.in/hakyll-clean-urls/" />
    <id>http://www.rohanjain.in/hakyll-clean-urls/</id>
    <published>2015-08-30T00:00:00Z</published>
    <updated>2015-08-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>The URLs generated by <a href="http://jaspervdj.be/hakyll/">Hakyll</a>, by default also include a <code>.html</code> extension. I have never been a fan of this. When things in reality are driven by the <code>Content-Type</code> header, it is absolutely redundant.</p>
<p>Hakyll provides all the utilities with which we can get cleaner URLs, like <a href=".">this page’s</a>. For this, I rely on the fact that most of the web servers automatically serve <code>/foo/</code> for the URL <code>/foo/</code>. To generate <em>clean</em> paths, I define a custom route - <code>cleanRoute</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">cleanRoute ::</span> <span class="dt">Routes</span>
cleanRoute <span class="fu">=</span> customRoute createIndexRoute
  <span class="kw">where</span>
    createIndexRoute ident <span class="fu">=</span> takeDirectory p <span class="fu">&lt;/&gt;</span> takeBaseName p <span class="fu">&lt;/&gt;</span> <span class="st">&quot;index.html&quot;</span>
                            <span class="kw">where</span> p <span class="fu">=</span> toFilePath ident</code></pre></div>
<p>This can now be used in in rule definition:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  match <span class="st">&quot;pages/*&quot;</span> <span class="fu">$</span> <span class="kw">do</span>
         route   <span class="fu">$</span> cleanRoute
         <span class="co">-- the compiler follows</span></code></pre></div>
<p>With this, a path say <code>/pages/about.html</code> will be generated as <code>/pages/about/</code>, hence solving the generation problem. We are only partially done though. The links that Hakyll generates will also include the <code>/</code> suffix in every URL. To get rid of that we define a set of functions:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">cleanIndexUrls ::</span> <span class="dt">Item</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)
cleanIndexUrls <span class="fu">=</span> return <span class="fu">.</span> fmap (withUrls cleanIndex)

<span class="ot">cleanIndexHtmls ::</span> <span class="dt">Item</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)
cleanIndexHtmls <span class="fu">=</span> return <span class="fu">.</span> fmap (replaceAll pattern replacement)
    <span class="kw">where</span>
      pattern <span class="fu">=</span> <span class="st">&quot;/&quot;</span>
      replacement <span class="fu">=</span> const <span class="st">&quot;/&quot;</span>

<span class="ot">cleanIndex ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span>
cleanIndex url
    <span class="fu">|</span> idx <span class="ot">`isSuffixOf`</span> url <span class="fu">=</span> take (length url <span class="fu">-</span> length idx) url
    <span class="fu">|</span> otherwise            <span class="fu">=</span> url
  <span class="kw">where</span> idx <span class="fu">=</span> <span class="st">&quot;index.html&quot;</span></code></pre></div>
<p><code>cleanIndexUrls</code> and <code>cleanIndexHtmls</code> strip out <code>/</code> from all the anchor tags and complete text respectively. These can be used over a page’s compiler like this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">         compile <span class="fu">$</span> pandocCompiler
            <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/page.html&quot;</span> pageCtx
            <span class="fu">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;content&quot;</span>
            <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> pageCtx
            <span class="fu">&gt;&gt;=</span> relativizeUrls
            <span class="fu">&gt;&gt;=</span> cleanIndexUrls <span class="co">-- cleanup href in all anchor tags.</span></code></pre></div>
<blockquote>
<p>This functionality is being used by <a href="https://github.com/crodjer/rohanjain.in/blob/master/site.hs">this blog</a> and <a href="https://github.com/irneh/workforpizza/blob/master/site.hs">irneh/workforpizza</a> off which this blog is actually based.</p>
</blockquote>
]]></summary>
</entry>
<entry>
    <title>Testing tornado websockets without third party clients</title>
    <link href="http://www.rohanjain.in/ws-test/" />
    <id>http://www.rohanjain.in/ws-test/</id>
    <published>2015-08-22T00:00:00Z</published>
    <updated>2015-08-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Recently, I built an encrypted <a href="http://github.com/crodjer/qotr/">chat service</a>, which was based on <a href="http://www.tornadoweb.org/">tornado</a> and <a href="http://emberjs.com/">ember.js</a>. The project itself had grave security issues, so I shut it down, but while working on it I learned a few new things and testing websockets with tornado is one of them.</p>
<p>Most of the material out there for this suggests developing separate client based tests, which I didn’t want to do. Eventually, I figured out that tornado already provides all the utilities to do unit/integration tests for websockets.</p>
<p>First, we will need a websockets based echo server to test, lets call it <code>ws.py</code>. The websocket handler would be:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="im">from</span> tornado <span class="im">import</span> web, websocket

<span class="kw">class</span> Echo(websocket.WebSocketHandler):

    <span class="co"># Open allows for any number arguments, unlike what pylint thinks.</span>
    <span class="co"># pylint: disable=W0221</span>
    <span class="kw">def</span> <span class="bu">open</span>(<span class="va">self</span>):
        <span class="va">self</span>.write_message(<span class="st">&#39;hello&#39;</span>)

    <span class="kw">def</span> on_message(<span class="va">self</span>, message):
        <span class="va">self</span>.write_message(message)

    <span class="kw">def</span> on_close(<span class="va">self</span>):
        <span class="va">self</span>.write_message(<span class="st">&#39;bye&#39;</span>)</code></pre></div>
<p>Lets define an application which uses the above handler:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python">APP <span class="op">=</span> web.Application([
    (<span class="vs">r&quot;/&quot;</span>, Echo),
])

<span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">&quot;__main__&quot;</span>:
    APP.listen(<span class="dv">5000</span>)</code></pre></div>
<p>Now, we will test the application out. Create a file, say <code>test_ws.py</code>:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="im">from</span> tornado <span class="im">import</span> testing, httpserver, gen, websocket
<span class="im">from</span> ws <span class="im">import</span> APP

<span class="kw">class</span> TestChatHandler(testing.AsyncTestCase):
    <span class="cf">pass</span></code></pre></div>
<p>We use tornado’s testing wrapper for the integration it provides with the event loop. Lets tell unittest how to setup the tests:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="kw">class</span> TestChatHandler(testing.AsyncTestCase):

    <span class="kw">def</span> setUp(<span class="va">self</span>):
        <span class="bu">super</span>(TestChatHandler, <span class="va">self</span>).setUp()
        server <span class="op">=</span> httpserver.HTTPServer(APP)
        socket, <span class="va">self</span>.port <span class="op">=</span> testing.bind_unused_port()
        server.add_socket(socket)</code></pre></div>
<p>We create a http server out of our application and get a socket bound to an unused port. We then ask the server to accept on the created socket. Don’t forget the <code>super</code> call, it ensures that the ioloop gets created. <code>unittest</code> will now ensure that a server and an ioloop is up and running before running tests.</p>
<p>Moving forward, we need to define a helper for creating a websocket connection to the server. Tornado websocket provides a handly websocket client. It can be created with <code>websocket.websocket_connect</code>.</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python">    <span class="kw">def</span> _mk_connection(<span class="va">self</span>):
        <span class="cf">return</span> websocket.websocket_connect(
            <span class="st">&#39;ws://localhost:{}/&#39;</span>.<span class="bu">format</span>(<span class="va">self</span>.port)
        )</code></pre></div>
<p>We can write a simple test for this:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python">    <span class="at">@testing.gen_test</span>
    <span class="kw">def</span> test_hello(<span class="va">self</span>):
        c <span class="op">=</span> <span class="cf">yield</span> <span class="va">self</span>._mk_connection()
        <span class="co"># Get the initial hello from the server.</span>
        response <span class="op">=</span> <span class="cf">yield</span> c.read_message()
        <span class="co"># Make sure that we got a &#39;hello&#39; not &#39;bye&#39;</span>
        <span class="va">self</span>.assertEqual(<span class="st">&#39;hello&#39;</span>, response)</code></pre></div>
<p><code>testing.gen_test</code> is a wrapper over tornado’s <code>gen.coroutine</code>. It runs the test synchronously under the ioloop that <code>testing.AsyncTestCase</code> creates in <code>setUp</code>. The test checks for the ‘hello’ message that we expect from the server on connection. <code>yield</code> makes sure that we for the response from the server. Note that if you write a <code>yield c.read_message()</code> when a message from server isn’t expected, the coroutine will keep waiting, eventually raising <code>tornado.ioloop.TimeoutError</code> (5 seconds by default). Great, we can write lot of tests using just what we have now.</p>
<p>The tests can be run via:</p>
<pre><code>python -m tornado.testing discover</code></pre>
<p>This could still be further improved. We need to yield and ignore the ‘hello’ message in every test, for every client. And in your application, it may be a more complicated handshake - possibly a few initial messages. Once you write a test for that handshake, it needn’t be re-written in every test. To avoid that, we will write an an abstraction over this:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python">    <span class="at">@gen.coroutine</span>
    <span class="kw">def</span> _mk_client(<span class="va">self</span>):
        c <span class="op">=</span> <span class="cf">yield</span> <span class="va">self</span>._mk_connection()

        <span class="co"># Discard the hello</span>
        <span class="co"># This could be any initial handshake, which needs to be generalized</span>
        <span class="co"># for most of the tests.</span>
        _ <span class="op">=</span> <span class="cf">yield</span> c.read_message()

        <span class="cf">raise</span> gen.Return(c)</code></pre></div>
<p><code>_mk_client</code> here is a method in which you could place all the boilerplate. The key point here is the exception <code>gen.Return(c)</code> we raise in the end. <code>return</code> with a value is allowed only after Python <code>3.3</code>, so <code>tornado.gen</code> uses the value associated with this exception as the coroutine’s result.</p>
<p>With <code>_mk_client</code> available, we can write tests which only include the relevant code:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python">    <span class="at">@testing.gen_test</span>
    <span class="kw">def</span> test_echo(<span class="va">self</span>):
        <span class="co"># A client with the hello taken care of.</span>
        c <span class="op">=</span> <span class="cf">yield</span> <span class="va">self</span>._mk_client()

        <span class="co"># Send a &#39;foo&#39; to the server.</span>
        c.write_message(<span class="st">&quot;foo&quot;</span>)
        <span class="co"># Get the &#39;foo&#39; back.</span>
        response <span class="op">=</span> <span class="cf">yield</span> c.read_message()
        <span class="co"># Make sure that we got a &#39;foo&#39; back and not &#39;bar&#39;.</span>
        <span class="va">self</span>.assertEqual(<span class="st">&#39;foo&#39;</span>, response)</code></pre></div>
<p>The application built out of this post is available <a href="https://gist.github.com/crodjer/1e9989ab30fdc32db926">as a gist</a>.</p>
]]></summary>
</entry>
<entry>
    <title>Using pulseaudio to play system beeps</title>
    <link href="http://www.rohanjain.in/bell/" />
    <id>http://www.rohanjain.in/bell/</id>
    <published>2015-08-20T00:00:00Z</published>
    <updated>2015-08-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Recently, I built a new desktop. After receiving everything, I realized that I was missing the onboard speaker (which creates the annoying beep sound). Ideally, the computer case should have had it, but they don’t come with a buzzer anymore. My various applications rely on the system beep, hence I needed to find a software alternative. Turns out it is fairly trivial to configure it to capture alerts with pulseaudio:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">start-pulseaudio-x11</span>
<span class="kw">pactl</span> upload-sample /usr/share/sounds/freedesktop/stereo/message.oga beep
<span class="kw">pactl</span> load-module module-x11-bell sample=beep
<span class="kw">xset</span> b 100</code></pre></div>
<p>To automatically do it on X11 start, I placed the above in my <a href="https://github.com/crodjer/configs/blob/121caa22d4b7c6324fa9a5b22e2d2fcc334afc96/.xsessionrc#L31">xsessionrc</a>.</p>
]]></summary>
</entry>
<entry>
    <title>Switch between networks based on availability</title>
    <link href="http://www.rohanjain.in/route-to/" />
    <id>http://www.rohanjain.in/route-to/</id>
    <published>2015-08-19T00:00:00Z</published>
    <updated>2015-08-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Having been blessed with an unreliable internet, I always have had the need to change the default route when one goes down. <a href="http://linux.die.net/man/8/ip">ip</a> provides you the required tooling to do that. I had been doing it so often, that I ended up writing a function to do this:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="fu">route_to ()</span> <span class="kw">{</span>
    <span class="ot">interface=$1</span>
    <span class="ot">route=$(</span><span class="kw">ip</span> route <span class="kw">|</span> <span class="kw">grep</span> <span class="ot">$interface</span> <span class="kw">|</span> <span class="kw">sed</span> -r <span class="st">&#39;s/\.0\/[[:digit:]]{2,3} /.1 /&#39;</span> <span class="kw">|</span> <span class="kw">cut</span> -d <span class="st">&#39; &#39;</span> -f -4<span class="ot">)</span>
    <span class="kw">if [</span> <span class="ot">-n</span> <span class="st">&quot;</span><span class="ot">$route</span><span class="st">&quot;</span><span class="kw"> ]</span>; <span class="kw">then</span>
        <span class="kw">sudo</span> ip route del default <span class="kw">&amp;&gt;</span> /dev/null
        <span class="kw">sudo</span> ip route replace default via <span class="ot">$route</span>
    <span class="kw">else</span>
        <span class="kw">echo</span> <span class="st">&quot;No routes match: </span><span class="ot">$interface</span><span class="st">&quot;</span> <span class="kw">&gt;&amp;2</span>
    <span class="kw">fi</span>
<span class="kw">}</span></code></pre></div>
<p>With this in available in my shell, I can simply do <code>route_to wlan0</code> and my system will start using <code>wlan0</code> as the default interface.</p>
]]></summary>
</entry>
<entry>
    <title>VNC over reverse SSH</title>
    <link href="http://www.rohanjain.in/vnc/" />
    <id>http://www.rohanjain.in/vnc/</id>
    <published>2015-05-10T00:00:00Z</published>
    <updated>2015-05-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>About a year ago, I switched my parents computer (lets call it <code>P</code>) from the pre-installed OS (Windows) to Ubuntu. The primary reason for this switch was it hard for me to debug and fix issues. Things have been smooth after the switch with no issues which I found hard to fix remotely. What specially has worked is my ability to log in to the computer when its on through my VPS and service it.</p>
<h2 id="reverse-ssh">Reverse SSH</h2>
<p>Whenever <code>P</code> starts, it makes a reverse SSH connection to my VPS. I use <a href="https://www.archlinux.org/packages/community/x86_64/autossh/">autossh</a> to monitor and make sure that it is eventually always connected.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">autossh</span> -M 10001 -f -NXYR 10000:localhost:22 vps</code></pre></div>
<p>Here <code>vps</code> is a SSH alias for my personal VPS.</p>
<p>I can tunnel through the VPS and login to <code>P</code> via VPS using the following SSH configuration:</p>
<pre class="config"><code>Host home
     Hostname localhost
     User username
     Port 10000
     ProxyCommand ssh -e none -W %h:%p vps</code></pre>
<p>To log in to <code>P</code> transparently, I can simply do:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">ssh</span> home</code></pre></div>
<p>I use this to resolve most of the issues. Of course it does have the requirement that the system be booted up and connected to a network.</p>
<h2 id="vnc">VNC</h2>
<p>There also can be issues which have to do with the GUI (say browser maintenance) and cannot be done easily over a text SSH session. For those cases, VNC is to rescue. I create a VNC server on <code>P</code> using <a href="https://wiki.archlinux.org/index.php/X11vnc">x11vnc</a> and tunnel the VNC port to my local through SSH. Now, I can access <code>P</code>’s graphical session remotely via a vnc client (mine is <a href="https://www.archlinux.org/packages/community/x86_64/tigervnc/">tigervnc</a>).</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">ssh</span> home -L 5900:localhost:5900 <span class="st">&quot;x11vnc -rfbauth ~/.vnc/passwd -display :0 -noxdamage&quot;</span>
$ <span class="kw">vncviewer</span> localhost::5900 -QualityLevel 3 -CompressLevel 6</code></pre></div>
<p>This method is much better compared to the more common solutions such has Google’s VNC chrome extension or other proprietary services. But they are slow and untrustable 3rd parties. With this way of setting up VNC, everything is protected under SSH connections.</p>
]]></summary>
</entry>
<entry>
    <title>The ubiquitous shell</title>
    <link href="http://www.rohanjain.in/bash/" />
    <id>http://www.rohanjain.in/bash/</id>
    <published>2015-03-05T00:00:00Z</published>
    <updated>2015-03-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Nothing makes a terminal feel more like home as one’s own shell configuration. My shell is bash, configured through a <a href="https://github.com/crodjer/configs/blob/master/.bashrc">.bashrc</a> and <a href="https://github.com/crodjer/configs/blob/master/.profile">.profile</a>. Bash is likely to be present in any Unix machine one uses.</p>
<p>Bash is also my primary IDE. This allows for keeping a relatively simple set of utilities and tools to internalize. Coupled with a reliable window manager, workflows can be quickly scripted in the head. Shell scripts are an option as well for more complex flows. This can be done at multiple levels: using uniquely identifiable comments in commands , bash functions, complete bash script.</p>
<p>Apart from the standard utilities (sed, cut, cat, tr etc.), I use a few tools as an aid:</p>
<ul>
<li><strong><a href="https://github.com/ggreer/the_silver_searcher">ag</a></strong> for amazingly fast lookup in files.</li>
<li><strong><a href="https://wiki.archlinux.org/index.php/rsync">rsync</a></strong>, to keep the files synchronized with remote servers.</li>
<li><strong><a href="https://github.com/ggreer/the_silver_searcher">entr</a></strong> to run build/test commands on a file change. Or, with rsync, synchronize on modifications.</li>
<li><strong><a href="https://www.archlinux.org/packages/community/any/autojump/">autojump</a></strong> to jump directly to frequently used directories.</li>
<li><strong><a href="https://stedolan.github.io/jq/">jq</a></strong> to process JSON output of a command.</li>
</ul>
<p>Tools are designed for the console first, and then bound to editors or IDEs. Familiarizing oneself to the command line interface makes the maximum amount of functionality accessible. For example, <a href="https://github.com/magit/magit">magit</a> is a powerful git interface for Emacs, but can be limiting for complex git operations such as an interactive rebase.</p>
<p>Composibility of the various commands can be useful as well, allowing one to build complex, repeatable commands. For example, the following uses <code>ip</code> to change a system’s default route, given the interface:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">ip</span> route del default <span class="kw">&amp;&gt;</span> /dev/null
<span class="kw">ip</span> route replace default via <span class="ot">$(</span><span class="kw">ip</span> route
     <span class="kw">|</span> <span class="kw">grep</span> ppp0 <span class="co"># Change this filter as per need.</span>
     <span class="kw">|</span> <span class="kw">sed</span> -r <span class="st">&#39;s/\.0\/[[:digit:]]{2,3} /.1 /&#39;</span>
     <span class="kw">|</span> <span class="kw">cut</span> -d <span class="st">&#39; &#39;</span> -f -4<span class="ot">)</span></code></pre></div>
<p>A great piece of literature on the Unix Philosophy is <a href="http://amzn.to/1qFlKCz">The Art of Unix Programming</a> by Eric S. Raymond. It also talks about the Unix interface design.</p>
]]></summary>
</entry>

</feed>
