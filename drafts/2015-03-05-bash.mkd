---
title: Fiddling with the bash shell
slug: bash
tags: bash, scripting, chores
author: crodjer
---

Have been writing a lot of bash scripts lately. They are incredibly effective in
automating laborious activities. There are various qualities of bash which I
love:

## Synatx
Bash scripting is specifically useful because of its syntactic simplicity. You
write exactly what you intend. If I want to automate setting monitor
configuration based on the plugged in monitors, [display.sh][display] will
handle that. I can use `xrandr` command as I would in bash directly.

## Features
Moreover, I have noticed that the cli interfaces of utilities almost always have
a superset of the features than their corresponding bindings in other
languages. For example in Python, `os.mkdir` doesn't have anything analogous to
the `-p/--parent` flag.

## Man pages

Documentation is another advantage scripting in bash. Because of the strict unix
convention of man pages, its easy to find well structured and comprehensive
documentation of utilities. For most other languages, it almost always means
opening the web browser. An example of a comprehensive man page I used recently
is `date`. I had to automate creating new drafts for my blog. I can do that now
with:

    e drafts/$(date +%F)-vps.mkd  # newpost

The hash tag in the end lets me reverse lookup through bash history quickly when
I want to write a new post. To edit a old post. `e` is an alias to open file in
the focused emacs frame, `emacsclient -n`.

## IDE
Scripting aside, bash has always been my go to IDE. It used to complement Vim
very well. Now that I have been using emacs for a while, the habits still
remain. Bash is the most generic IDE there could be and with powerful window
managers (XMonad for me) a shell is an integral part of the editing experience.
I generally have project workspaces with my editor on the left partition and two
or three corresponding bash sessions on the right. There is nothing more
extensible than this system, not even elisp on emacs. Coupled with my
[watchman][watchman] utility, I get live feedback on the terminal as I write
code.

## Examples

Some other examples of scripts which I use frequently are:

 - Quickly [set up my home directory][setuphome] on new systems.
 - Managing [cabal sandboxes][hsb] for my Haskell software.
 - Build on save with [watchman][watchman].
 - Checking if the headphone jack is plugged in with [jacked.sh][jacked].
 - Re-configure monitors based on current plugged in status with
   [display.sh][display].

[setuphome]: https://github.com/crodjer/configs/blob/master/scripts/setuphome.sh
[hsb]: https://github.com/crodjer/configs/blob/master/scripts/hsb.sh
[watchman]: https://github.com/crodjer/watchman
[jacked]: https://github.com/crodjer/configs/blob/master/scripts/jacked.sh
[display]: https://github.com/crodjer/configs/blob/master/scripts/display.sh
