<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Old on The Perpetual Amature</title><link>/old/</link><description>Recent content in Old on The Perpetual Amature</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Mon, 31 Aug 2015 00:00:00 +0000</lastBuildDate><atom:link href="/old/index.xml" rel="self" type="application/rss+xml"/><item><title>Categorizing archives by year with Hakyll</title><link>/hakyll-years/</link><pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate><guid>/hakyll-years/</guid><description>&lt;p>Recently, I decided to categorize my posts under directories named by
the year they were created in. For example, this post is placed at:
&lt;code>posts/2015/hakyll-years.mkd&lt;/code>. I decided to utilize this structure to
also group how archives are listed. Inspired from
&lt;a href="http://jaspervdj.be/hakyll/reference/src/Hakyll-Web-Tags.html">Hakyll&amp;rsquo;s tag functionality&lt;/a>
I wrote my own group by years functionality. This post tries to
explain that. Also, I don&amp;rsquo;t see why a similar logic cannot be used to
do simple pagination.&lt;/p></description></item><item><title>Clean URLs with Hakyll</title><link>/hakyll-clean-urls/</link><pubDate>Sun, 30 Aug 2015 00:00:00 +0000</pubDate><guid>/hakyll-clean-urls/</guid><description>&lt;p>The URLs generated by &lt;a href="http://jaspervdj.be/hakyll/">Hakyll&lt;/a>, by default also include a
&lt;code>.html&lt;/code> extension. I have never been a fan of this. When things in
reality are driven by the &lt;code>Content-Type&lt;/code> header, it is absolutely
redundant.&lt;/p>
&lt;p>Hakyll provides all the utilities with which we can get cleaner URLs,
like &lt;a href=".">this page&amp;rsquo;s&lt;/a>. For this, I rely on the fact that most of the
web servers automatically serve &lt;code>/foo/index.html&lt;/code> for the URL
&lt;code>/foo/&lt;/code>. To generate &lt;em>clean&lt;/em> paths, I define a custom route -
&lt;code>cleanRoute&lt;/code>:&lt;/p></description></item><item><title>Sitemap with Hakyll</title><link>/hakyll-sitemap/</link><pubDate>Sun, 30 Aug 2015 00:00:00 +0000</pubDate><guid>/hakyll-sitemap/</guid><description>&lt;p>Its fairly trivial to configure &lt;a href="http://jaspervdj.be/hakyll/">Hakyll&lt;/a> to generate
sitemaps. Sitemaps helps search engines websites. Similar to any
typical html page, create a template - &lt;code>templates/sitemap.xml&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;urlset&lt;/span> &lt;span class="na">xmlns=&lt;/span>&lt;span class="s">&amp;#34;http://www.sitemaps.org/schemas/sitemap/0.9&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$for(entries)$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;url&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;loc&amp;gt;&lt;/span>$host$$url$&lt;span class="nt">&amp;lt;/loc&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;changefreq&amp;gt;&lt;/span>weekly&lt;span class="nt">&amp;lt;/changefreq&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $if(lastmod)$&lt;span class="nt">&amp;lt;lastmod&amp;gt;&lt;/span>$lastmod$&lt;span class="nt">&amp;lt;/lastmod&amp;gt;&lt;/span>$endif$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;priority&amp;gt;&lt;/span>0.8&lt;span class="nt">&amp;lt;/priority&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/url&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$endfor$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/urlset&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, using the templates, create a rule which uses all the pages from
the site as entries. Here is what I do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">create&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;sitemap.xml&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">$&lt;/span> &lt;span class="kr">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">route&lt;/span> &lt;span class="n">idRoute&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">compile&lt;/span> &lt;span class="o">$&lt;/span> &lt;span class="kr">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">posts&lt;/span> &lt;span class="ow">&amp;lt;-&lt;/span> &lt;span class="n">recentFirst&lt;/span> &lt;span class="o">=&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">loadAll&lt;/span> &lt;span class="s">&amp;#34;posts/*/*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pages&lt;/span> &lt;span class="ow">&amp;lt;-&lt;/span> &lt;span class="n">loadAll&lt;/span> &lt;span class="s">&amp;#34;pages/*&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">let&lt;/span> &lt;span class="n">allPosts&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">pages&lt;/span> &lt;span class="o">++&lt;/span> &lt;span class="n">posts&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">let&lt;/span> &lt;span class="n">sitemapCtx&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="n">mconcat&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span> &lt;span class="n">listField&lt;/span> &lt;span class="s">&amp;#34;entries&amp;#34;&lt;/span> &lt;span class="n">pageCtx&lt;/span> &lt;span class="n">allPosts&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="n">constField&lt;/span> &lt;span class="s">&amp;#34;host&amp;#34;&lt;/span> &lt;span class="n">host&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="n">defaultContext&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">makeItem&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;gt;&amp;gt;=&lt;/span> &lt;span class="n">loadAndApplyTemplate&lt;/span> &lt;span class="s">&amp;#34;templates/sitemap.xml&amp;#34;&lt;/span> &lt;span class="n">sitemapCtx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;gt;&amp;gt;=&lt;/span> &lt;span class="n">cleanIndexHtmls&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This generates &lt;a href="/sitemap.xml">/sitemap.xml&lt;/a> which can be submitted to
search engines for indexing.&lt;/p></description></item><item><title>Testing tornado websockets without third party clients</title><link>/ws-test/</link><pubDate>Sat, 22 Aug 2015 00:00:00 +0000</pubDate><guid>/ws-test/</guid><description>&lt;p>Recently, I built an encrypted &lt;a href="http://github.com/crodjer/qotr/">chat service&lt;/a>, which was based on
&lt;a href="http://www.tornadoweb.org/">tornado&lt;/a> and &lt;a href="http://emberjs.com/">ember.js&lt;/a>. The project itself had grave security issues, so I
shut it down, but while working on it I learned a few new things and testing
websockets with tornado is one of them.&lt;/p>
&lt;p>Most of the material out there for this suggests developing separate client
based tests, which I didn&amp;rsquo;t want to do. Eventually, I figured out that tornado
already provides all the utilities to do unit/integration tests for websockets.&lt;/p></description></item><item><title>Using pulseaudio to play system beeps</title><link>/bell/</link><pubDate>Thu, 20 Aug 2015 00:00:00 +0000</pubDate><guid>/bell/</guid><description>&lt;p>Recently, I built a new desktop. After receiving everything, I realized that I
was missing the onboard speaker (which creates the annoying beep sound).
Ideally, the computer case should have had it, but they don&amp;rsquo;t come with a buzzer
anymore. My various applications rely on the system beep, hence I needed to find
a software alternative. Turns out it is fairly trivial to configure it to
capture alerts with pulseaudio:&lt;/p></description></item><item><title>The ubiquitous shell</title><link>/bash/</link><pubDate>Thu, 05 Mar 2015 00:00:00 +0000</pubDate><guid>/bash/</guid><description>&lt;p>Nothing makes a terminal feel more like home as one&amp;rsquo;s own shell
configuration. My shell is bash, configured through a &lt;a href="https://github.com/crodjer/configs/blob/master/.bashrc">.bashrc&lt;/a> and
&lt;a href="https://github.com/crodjer/configs/blob/master/.profile">.profile&lt;/a>. Bash is likely to be present in any Unix machine one
uses.&lt;/p>
&lt;p>Bash is also my primary IDE. This allows for keeping a relatively simple set of
utilities and tools to internalize. Coupled with a reliable window manager,
workflows can be quickly scripted in the head. Shell scripts are an option as
well for more complex flows. This can be done at multiple levels: using uniquely
identifiable comments in commands , bash functions, complete bash script.&lt;/p></description></item><item><title>Emacs: Flymake with virtualenvs in python-mode</title><link>/emacs-flymake-with-virtualenvs-in-python-mode/</link><pubDate>Tue, 28 Jan 2014 00:00:00 +0000</pubDate><guid>/emacs-flymake-with-virtualenvs-in-python-mode/</guid><description>&lt;p>Lately, I have been writing some python with emacs. So, I have been trying to
get the popular checkers (&lt;code>pylint&lt;/code>/&lt;code>pyflakes&lt;/code>) to work with flymake and
virtualenvs. The issues with existing solutions to get flymake working with the
checkers is that most of them assume a global version of executable (which would
be fine if it weren&amp;rsquo;t for the whole python 2 and 3 incompatibility).&lt;/p>
&lt;p>The &lt;code>python-mode&lt;/code> in the latest emacs versions (mine is &lt;code>24.3.1&lt;/code>) includes a
basic support for &lt;code>virtualenvs&lt;/code>. I run &lt;code>pylint/pyflakes&lt;/code> through the command
&lt;code>env&lt;/code> with the environment variables calculated from the functions provided by
&lt;code>python-mode&lt;/code>. Here is the code extracted from my
&lt;a href="https://github.com/crodjer/configs/blob/master/.emacs">emacs configuration&lt;/a>:&lt;/p></description></item><item><title>A productive workflow with vim sessions and servers</title><link>/yet-another-vim-productivity-post-server-client/</link><pubDate>Sun, 15 Apr 2012 00:00:00 +0000</pubDate><guid>/yet-another-vim-productivity-post-server-client/</guid><description>&lt;p>You can find lot of posts on the internet which try to tell you how to improve
the ways in which Vim is used. Well, here is another one.&lt;/p>
&lt;p>#Vim Server, ZSH and Tiles&lt;/p>
&lt;p>A Vim instance behaves as a server in which files can be opened through remote
applications. Read &lt;code>:help client-server&lt;/code> of Vim to know more about this. I
generally keep multiple Vim sessions running, described by task they are related
to.&lt;/p></description></item><item><title>Configure ssh to handle proxies and tunnels seamlessly</title><link>/configure-ssh-to-handle-proxies-and-tunnels-seamlessly/</link><pubDate>Sat, 27 Aug 2011 00:00:00 +0000</pubDate><guid>/configure-ssh-to-handle-proxies-and-tunnels-seamlessly/</guid><description>&lt;p>Recently I opened up on the port &lt;em>443&lt;/em> over my EC2 instance (more or less like
a VPS), so that I can access it through any firewalled proxy too. Apart from
getting SSH running to a machine from outside world, I did some cool
configuration to have ssh deal with with various remote hosts automatically. It
uses &lt;em>the right&lt;/em> proxy settings according the host being accessed.&lt;/p>
&lt;p>All the stuff which runs over ssh (like &lt;em>scp&lt;/em>, &lt;em>git&lt;/em> etc.) also work the way
they are supposed to, following the ssh configuration.&lt;/p></description></item></channel></rss>