<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Old on The Perpetual Amature</title><link>/old/</link><description>Recent content in Old on The Perpetual Amature</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Mon, 31 Aug 2015 00:00:00 +0000</lastBuildDate><atom:link href="/old/index.xml" rel="self" type="application/rss+xml"/><item><title>Categorizing archives by year with Hakyll</title><link>/hakyll-years/</link><pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate><guid>/hakyll-years/</guid><description>&lt;p&gt;Recently, I decided to categorize my posts under directories named by
the year they were created in. For example, this post is placed at:
&lt;code&gt;posts/2015/hakyll-years.mkd&lt;/code&gt;. I decided to utilize this structure to
also group how archives are listed. Inspired from
&lt;a href="http://jaspervdj.be/hakyll/reference/src/Hakyll-Web-Tags.html"&gt;Hakyll&amp;rsquo;s tag functionality&lt;/a&gt;
I wrote my own group by years functionality. This post tries to
explain that. Also, I don&amp;rsquo;t see why a similar logic cannot be used to
do simple pagination.&lt;/p&gt;</description></item><item><title>Clean URLs with Hakyll</title><link>/hakyll-clean-urls/</link><pubDate>Sun, 30 Aug 2015 00:00:00 +0000</pubDate><guid>/hakyll-clean-urls/</guid><description>&lt;p&gt;The URLs generated by &lt;a href="http://jaspervdj.be/hakyll/"&gt;Hakyll&lt;/a&gt;, by default also include a
&lt;code&gt;.html&lt;/code&gt; extension. I have never been a fan of this. When things in
reality are driven by the &lt;code&gt;Content-Type&lt;/code&gt; header, it is absolutely
redundant.&lt;/p&gt;
&lt;p&gt;Hakyll provides all the utilities with which we can get cleaner URLs,
like &lt;a href="."&gt;this page&amp;rsquo;s&lt;/a&gt;. For this, I rely on the fact that most of the
web servers automatically serve &lt;code&gt;/foo/index.html&lt;/code&gt; for the URL
&lt;code&gt;/foo/&lt;/code&gt;. To generate &lt;em&gt;clean&lt;/em&gt; paths, I define a custom route -
&lt;code&gt;cleanRoute&lt;/code&gt;:&lt;/p&gt;</description></item><item><title>Sitemap with Hakyll</title><link>/hakyll-sitemap/</link><pubDate>Sun, 30 Aug 2015 00:00:00 +0000</pubDate><guid>/hakyll-sitemap/</guid><description>&lt;p&gt;Its fairly trivial to configure &lt;a href="http://jaspervdj.be/hakyll/"&gt;Hakyll&lt;/a&gt; to generate
sitemaps. Sitemaps helps search engines websites. Similar to any
typical html page, create a template - &lt;code&gt;templates/sitemap.xml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nt"&gt;&amp;lt;urlset&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;http://www.sitemaps.org/schemas/sitemap/0.9&amp;#34;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$for(entries)$
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nt"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nt"&gt;&amp;lt;loc&amp;gt;&lt;/span&gt;$host$$url$&lt;span class="nt"&gt;&amp;lt;/loc&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nt"&gt;&amp;lt;changefreq&amp;gt;&lt;/span&gt;weekly&lt;span class="nt"&gt;&amp;lt;/changefreq&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; $if(lastmod)$&lt;span class="nt"&gt;&amp;lt;lastmod&amp;gt;&lt;/span&gt;$lastmod$&lt;span class="nt"&gt;&amp;lt;/lastmod&amp;gt;&lt;/span&gt;$endif$
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nt"&gt;&amp;lt;priority&amp;gt;&lt;/span&gt;0.8&lt;span class="nt"&gt;&amp;lt;/priority&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nt"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$endfor$
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nt"&gt;&amp;lt;/urlset&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, using the templates, create a rule which uses all the pages from
the site as entries. Here is what I do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-haskell" data-lang="haskell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;sitemap.xml&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="n"&gt;idRoute&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;compile&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;recentFirst&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;loadAll&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;posts/*/*&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;loadAll&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;pages/*&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;allPosts&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;sitemapCtx&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mconcat&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;listField&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;entries&amp;#34;&lt;/span&gt; &lt;span class="n"&gt;pageCtx&lt;/span&gt; &lt;span class="n"&gt;allPosts&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;constField&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;host&amp;#34;&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaultContext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;makeItem&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;loadAndApplyTemplate&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;templates/sitemap.xml&amp;#34;&lt;/span&gt; &lt;span class="n"&gt;sitemapCtx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;cleanIndexHtmls&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This generates &lt;a href="/sitemap.xml"&gt;/sitemap.xml&lt;/a&gt; which can be submitted to
search engines for indexing.&lt;/p&gt;</description></item><item><title>Testing tornado websockets without third party clients</title><link>/ws-test/</link><pubDate>Sat, 22 Aug 2015 00:00:00 +0000</pubDate><guid>/ws-test/</guid><description>&lt;p&gt;Recently, I built an encrypted &lt;a href="http://github.com/crodjer/qotr/"&gt;chat service&lt;/a&gt;, which was based on
&lt;a href="http://www.tornadoweb.org/"&gt;tornado&lt;/a&gt; and &lt;a href="http://emberjs.com/"&gt;ember.js&lt;/a&gt;. The project itself had grave security issues, so I
shut it down, but while working on it I learned a few new things and testing
websockets with tornado is one of them.&lt;/p&gt;
&lt;p&gt;Most of the material out there for this suggests developing separate client
based tests, which I didn&amp;rsquo;t want to do. Eventually, I figured out that tornado
already provides all the utilities to do unit/integration tests for websockets.&lt;/p&gt;</description></item><item><title>Using pulseaudio to play system beeps</title><link>/bell/</link><pubDate>Thu, 20 Aug 2015 00:00:00 +0000</pubDate><guid>/bell/</guid><description>&lt;p&gt;Recently, I built a new desktop. After receiving everything, I realized that I
was missing the onboard speaker (which creates the annoying beep sound).
Ideally, the computer case should have had it, but they don&amp;rsquo;t come with a buzzer
anymore. My various applications rely on the system beep, hence I needed to find
a software alternative. Turns out it is fairly trivial to configure it to
capture alerts with pulseaudio:&lt;/p&gt;</description></item><item><title>The ubiquitous shell</title><link>/bash/</link><pubDate>Thu, 05 Mar 2015 00:00:00 +0000</pubDate><guid>/bash/</guid><description>&lt;p&gt;Nothing makes a terminal feel more like home as one&amp;rsquo;s own shell
configuration. My shell is bash, configured through a &lt;a href="https://github.com/crodjer/configs/blob/master/.bashrc"&gt;.bashrc&lt;/a&gt; and
&lt;a href="https://github.com/crodjer/configs/blob/master/.profile"&gt;.profile&lt;/a&gt;. Bash is likely to be present in any Unix machine one
uses.&lt;/p&gt;
&lt;p&gt;Bash is also my primary IDE. This allows for keeping a relatively simple set of
utilities and tools to internalize. Coupled with a reliable window manager,
workflows can be quickly scripted in the head. Shell scripts are an option as
well for more complex flows. This can be done at multiple levels: using uniquely
identifiable comments in commands , bash functions, complete bash script.&lt;/p&gt;</description></item><item><title>Emacs: Flymake with virtualenvs in python-mode</title><link>/emacs-flymake-with-virtualenvs-in-python-mode/</link><pubDate>Tue, 28 Jan 2014 00:00:00 +0000</pubDate><guid>/emacs-flymake-with-virtualenvs-in-python-mode/</guid><description>&lt;p&gt;Lately, I have been writing some python with emacs. So, I have been trying to
get the popular checkers (&lt;code&gt;pylint&lt;/code&gt;/&lt;code&gt;pyflakes&lt;/code&gt;) to work with flymake and
virtualenvs. The issues with existing solutions to get flymake working with the
checkers is that most of them assume a global version of executable (which would
be fine if it weren&amp;rsquo;t for the whole python 2 and 3 incompatibility).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;python-mode&lt;/code&gt; in the latest emacs versions (mine is &lt;code&gt;24.3.1&lt;/code&gt;) includes a
basic support for &lt;code&gt;virtualenvs&lt;/code&gt;. I run &lt;code&gt;pylint/pyflakes&lt;/code&gt; through the command
&lt;code&gt;env&lt;/code&gt; with the environment variables calculated from the functions provided by
&lt;code&gt;python-mode&lt;/code&gt;. Here is the code extracted from my
&lt;a href="https://github.com/crodjer/configs/blob/master/.emacs"&gt;emacs configuration&lt;/a&gt;:&lt;/p&gt;</description></item><item><title>A productive workflow with vim sessions and servers</title><link>/yet-another-vim-productivity-post-server-client/</link><pubDate>Sun, 15 Apr 2012 00:00:00 +0000</pubDate><guid>/yet-another-vim-productivity-post-server-client/</guid><description>&lt;p&gt;You can find lot of posts on the internet which try to tell you how to improve
the ways in which Vim is used. Well, here is another one.&lt;/p&gt;
&lt;p&gt;#Vim Server, ZSH and Tiles&lt;/p&gt;
&lt;p&gt;A Vim instance behaves as a server in which files can be opened through remote
applications. Read &lt;code&gt;:help client-server&lt;/code&gt; of Vim to know more about this. I
generally keep multiple Vim sessions running, described by task they are related
to.&lt;/p&gt;</description></item><item><title>Configure ssh to handle proxies and tunnels seamlessly</title><link>/configure-ssh-to-handle-proxies-and-tunnels-seamlessly/</link><pubDate>Sat, 27 Aug 2011 00:00:00 +0000</pubDate><guid>/configure-ssh-to-handle-proxies-and-tunnels-seamlessly/</guid><description>&lt;p&gt;Recently I opened up on the port &lt;em&gt;443&lt;/em&gt; over my EC2 instance (more or less like
a VPS), so that I can access it through any firewalled proxy too. Apart from
getting SSH running to a machine from outside world, I did some cool
configuration to have ssh deal with with various remote hosts automatically. It
uses &lt;em&gt;the right&lt;/em&gt; proxy settings according the host being accessed.&lt;/p&gt;
&lt;p&gt;All the stuff which runs over ssh (like &lt;em&gt;scp&lt;/em&gt;, &lt;em&gt;git&lt;/em&gt; etc.) also work the way
they are supposed to, following the ssh configuration.&lt;/p&gt;</description></item></channel></rss>